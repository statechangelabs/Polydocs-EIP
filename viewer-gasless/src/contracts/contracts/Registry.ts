/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface RegistryInterface extends utils.Interface {
  functions: {
    "_templateOwners(uint256)": FunctionFragment;
    "acceptTerms(uint256,string,string)": FunctionFragment;
    "acceptTerms(uint256,string)": FunctionFragment;
    "acceptTermsFor(address,string,string,uint256,bytes)": FunctionFragment;
    "acceptTermsFor(address,string,uint256,bytes)": FunctionFragment;
    "acceptedTerms(address,uint256)": FunctionFragment;
    "approveMetaSigner(address,bool)": FunctionFragment;
    "hashAddressId(address,uint256)": FunctionFragment;
    "hashKeyId(string,uint256)": FunctionFragment;
    "isMetaSigner(address)": FunctionFragment;
    "lastTermChange(uint256)": FunctionFragment;
    "mintTemplate(string,address)": FunctionFragment;
    "mintTemplate(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "renderers(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setGlobalRenderer(string)": FunctionFragment;
    "setTemplate(uint256,string)": FunctionFragment;
    "setTerm(uint256,string,string)": FunctionFragment;
    "templateUrl(uint256)": FunctionFragment;
    "templateUrlWithPrefix(uint256,string)": FunctionFragment;
    "templates(uint256)": FunctionFragment;
    "term(uint256,string)": FunctionFragment;
    "terms(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_templateOwners"
      | "acceptTerms(uint256,string,string)"
      | "acceptTerms(uint256,string)"
      | "acceptTermsFor(address,string,string,uint256,bytes)"
      | "acceptTermsFor(address,string,uint256,bytes)"
      | "acceptedTerms"
      | "approveMetaSigner"
      | "hashAddressId"
      | "hashKeyId"
      | "isMetaSigner"
      | "lastTermChange"
      | "mintTemplate(string,address)"
      | "mintTemplate(string)"
      | "owner"
      | "renderers"
      | "renounceOwnership"
      | "setGlobalRenderer"
      | "setTemplate"
      | "setTerm"
      | "templateUrl"
      | "templateUrlWithPrefix"
      | "templates"
      | "term"
      | "terms"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_templateOwners",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptTerms(uint256,string,string)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptTerms(uint256,string)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptTermsFor(address,string,string,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptTermsFor(address,string,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptedTerms",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveMetaSigner",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "hashAddressId",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hashKeyId",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMetaSigner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTermChange",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTemplate(string,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTemplate(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renderers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalRenderer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTemplate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTerm",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "templateUrl",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "templateUrlWithPrefix",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "templates",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "term",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "terms",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_templateOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptTerms(uint256,string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptTerms(uint256,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptTermsFor(address,string,string,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptTermsFor(address,string,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptedTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveMetaSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashAddressId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashKeyId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMetaSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTermChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintTemplate(string,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintTemplate(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renderers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalRenderer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTerm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "templateUrl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "templateUrlWithPrefix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "templates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "term", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "terms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AcceptedTerms(uint256,address,string,string)": EventFragment;
    "GlobalRendererChanged(string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TemplateChanged(uint256,string)": EventFragment;
    "TemplateCreated(uint256,string,address)": EventFragment;
    "TermChanged(uint256,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AcceptedTerms"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GlobalRendererChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TemplateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TemplateCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TermChanged"): EventFragment;
}

export interface AcceptedTermsEventObject {
  templateId: BigNumber;
  user: string;
  templateUri: string;
  metadataUri: string;
}
export type AcceptedTermsEvent = TypedEvent<
  [BigNumber, string, string, string],
  AcceptedTermsEventObject
>;

export type AcceptedTermsEventFilter = TypedEventFilter<AcceptedTermsEvent>;

export interface GlobalRendererChangedEventObject {
  _renderer: string;
}
export type GlobalRendererChangedEvent = TypedEvent<
  [string],
  GlobalRendererChangedEventObject
>;

export type GlobalRendererChangedEventFilter =
  TypedEventFilter<GlobalRendererChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TemplateChangedEventObject {
  _templateId: BigNumber;
  _template: string;
}
export type TemplateChangedEvent = TypedEvent<
  [BigNumber, string],
  TemplateChangedEventObject
>;

export type TemplateChangedEventFilter = TypedEventFilter<TemplateChangedEvent>;

export interface TemplateCreatedEventObject {
  _templateId: BigNumber;
  _template: string;
  _owner: string;
}
export type TemplateCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  TemplateCreatedEventObject
>;

export type TemplateCreatedEventFilter = TypedEventFilter<TemplateCreatedEvent>;

export interface TermChangedEventObject {
  _templateId: BigNumber;
  _term: string;
  _value: string;
}
export type TermChangedEvent = TypedEvent<
  [BigNumber, string, string],
  TermChangedEventObject
>;

export type TermChangedEventFilter = TypedEventFilter<TermChangedEvent>;

export interface Registry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _templateOwners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "acceptTerms(uint256,string,string)"(
      templateId: PromiseOrValue<BigNumberish>,
      newTemplateUrl: PromiseOrValue<string>,
      _metdataUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "acceptTerms(uint256,string)"(
      templateId: PromiseOrValue<BigNumberish>,
      newTemplateUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "acceptTermsFor(address,string,string,uint256,bytes)"(
      _signer: PromiseOrValue<string>,
      _newtemplateUrl: PromiseOrValue<string>,
      _metadataUri: PromiseOrValue<string>,
      _templateId: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "acceptTermsFor(address,string,uint256,bytes)"(
      _signer: PromiseOrValue<string>,
      _newtemplateUrl: PromiseOrValue<string>,
      _templateId: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptedTerms(
      _signer: PromiseOrValue<string>,
      _templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    approveMetaSigner(
      _signer: PromiseOrValue<string>,
      _approval: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hashAddressId(
      user: PromiseOrValue<string>,
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashKeyId(
      key: PromiseOrValue<string>,
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isMetaSigner(
      _signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastTermChange(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "mintTemplate(string,address)"(
      _templateUri: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mintTemplate(string)"(
      _templateUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renderers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGlobalRenderer(
      _newGlobalRenderer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTemplate(
      _templateId: PromiseOrValue<BigNumberish>,
      _newTemplate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTerm(
      _templateId: PromiseOrValue<BigNumberish>,
      _key: PromiseOrValue<string>,
      _value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    templateUrl(
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    templateUrlWithPrefix(
      templateId: PromiseOrValue<BigNumberish>,
      prefix: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    templates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    term(
      templateId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    terms(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _templateOwners(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "acceptTerms(uint256,string,string)"(
    templateId: PromiseOrValue<BigNumberish>,
    newTemplateUrl: PromiseOrValue<string>,
    _metdataUri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "acceptTerms(uint256,string)"(
    templateId: PromiseOrValue<BigNumberish>,
    newTemplateUrl: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "acceptTermsFor(address,string,string,uint256,bytes)"(
    _signer: PromiseOrValue<string>,
    _newtemplateUrl: PromiseOrValue<string>,
    _metadataUri: PromiseOrValue<string>,
    _templateId: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "acceptTermsFor(address,string,uint256,bytes)"(
    _signer: PromiseOrValue<string>,
    _newtemplateUrl: PromiseOrValue<string>,
    _templateId: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptedTerms(
    _signer: PromiseOrValue<string>,
    _templateId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  approveMetaSigner(
    _signer: PromiseOrValue<string>,
    _approval: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hashAddressId(
    user: PromiseOrValue<string>,
    templateId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  hashKeyId(
    key: PromiseOrValue<string>,
    templateId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  isMetaSigner(
    _signer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastTermChange(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "mintTemplate(string,address)"(
    _templateUri: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mintTemplate(string)"(
    _templateUri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renderers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGlobalRenderer(
    _newGlobalRenderer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTemplate(
    _templateId: PromiseOrValue<BigNumberish>,
    _newTemplate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTerm(
    _templateId: PromiseOrValue<BigNumberish>,
    _key: PromiseOrValue<string>,
    _value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  templateUrl(
    templateId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  templateUrlWithPrefix(
    templateId: PromiseOrValue<BigNumberish>,
    prefix: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  templates(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  term(
    templateId: PromiseOrValue<BigNumberish>,
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  terms(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _templateOwners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "acceptTerms(uint256,string,string)"(
      templateId: PromiseOrValue<BigNumberish>,
      newTemplateUrl: PromiseOrValue<string>,
      _metdataUri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptTerms(uint256,string)"(
      templateId: PromiseOrValue<BigNumberish>,
      newTemplateUrl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptTermsFor(address,string,string,uint256,bytes)"(
      _signer: PromiseOrValue<string>,
      _newtemplateUrl: PromiseOrValue<string>,
      _metadataUri: PromiseOrValue<string>,
      _templateId: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptTermsFor(address,string,uint256,bytes)"(
      _signer: PromiseOrValue<string>,
      _newtemplateUrl: PromiseOrValue<string>,
      _templateId: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptedTerms(
      _signer: PromiseOrValue<string>,
      _templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approveMetaSigner(
      _signer: PromiseOrValue<string>,
      _approval: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    hashAddressId(
      user: PromiseOrValue<string>,
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    hashKeyId(
      key: PromiseOrValue<string>,
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    isMetaSigner(
      _signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastTermChange(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mintTemplate(string,address)"(
      _templateUri: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mintTemplate(string)"(
      _templateUri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renderers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setGlobalRenderer(
      _newGlobalRenderer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTemplate(
      _templateId: PromiseOrValue<BigNumberish>,
      _newTemplate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTerm(
      _templateId: PromiseOrValue<BigNumberish>,
      _key: PromiseOrValue<string>,
      _value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    templateUrl(
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    templateUrlWithPrefix(
      templateId: PromiseOrValue<BigNumberish>,
      prefix: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    templates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    term(
      templateId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    terms(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AcceptedTerms(uint256,address,string,string)"(
      templateId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      templateUri?: null,
      metadataUri?: null
    ): AcceptedTermsEventFilter;
    AcceptedTerms(
      templateId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      templateUri?: null,
      metadataUri?: null
    ): AcceptedTermsEventFilter;

    "GlobalRendererChanged(string)"(
      _renderer?: PromiseOrValue<string> | null
    ): GlobalRendererChangedEventFilter;
    GlobalRendererChanged(
      _renderer?: PromiseOrValue<string> | null
    ): GlobalRendererChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "TemplateChanged(uint256,string)"(
      _templateId?: PromiseOrValue<BigNumberish> | null,
      _template?: null
    ): TemplateChangedEventFilter;
    TemplateChanged(
      _templateId?: PromiseOrValue<BigNumberish> | null,
      _template?: null
    ): TemplateChangedEventFilter;

    "TemplateCreated(uint256,string,address)"(
      _templateId?: PromiseOrValue<BigNumberish> | null,
      _template?: null,
      _owner?: null
    ): TemplateCreatedEventFilter;
    TemplateCreated(
      _templateId?: PromiseOrValue<BigNumberish> | null,
      _template?: null,
      _owner?: null
    ): TemplateCreatedEventFilter;

    "TermChanged(uint256,string,string)"(
      _templateId?: PromiseOrValue<BigNumberish> | null,
      _term?: null,
      _value?: null
    ): TermChangedEventFilter;
    TermChanged(
      _templateId?: PromiseOrValue<BigNumberish> | null,
      _term?: null,
      _value?: null
    ): TermChangedEventFilter;
  };

  estimateGas: {
    _templateOwners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "acceptTerms(uint256,string,string)"(
      templateId: PromiseOrValue<BigNumberish>,
      newTemplateUrl: PromiseOrValue<string>,
      _metdataUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "acceptTerms(uint256,string)"(
      templateId: PromiseOrValue<BigNumberish>,
      newTemplateUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "acceptTermsFor(address,string,string,uint256,bytes)"(
      _signer: PromiseOrValue<string>,
      _newtemplateUrl: PromiseOrValue<string>,
      _metadataUri: PromiseOrValue<string>,
      _templateId: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "acceptTermsFor(address,string,uint256,bytes)"(
      _signer: PromiseOrValue<string>,
      _newtemplateUrl: PromiseOrValue<string>,
      _templateId: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptedTerms(
      _signer: PromiseOrValue<string>,
      _templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveMetaSigner(
      _signer: PromiseOrValue<string>,
      _approval: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hashAddressId(
      user: PromiseOrValue<string>,
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashKeyId(
      key: PromiseOrValue<string>,
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMetaSigner(
      _signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastTermChange(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mintTemplate(string,address)"(
      _templateUri: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mintTemplate(string)"(
      _templateUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renderers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGlobalRenderer(
      _newGlobalRenderer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTemplate(
      _templateId: PromiseOrValue<BigNumberish>,
      _newTemplate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTerm(
      _templateId: PromiseOrValue<BigNumberish>,
      _key: PromiseOrValue<string>,
      _value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    templateUrl(
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    templateUrlWithPrefix(
      templateId: PromiseOrValue<BigNumberish>,
      prefix: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    templates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    term(
      templateId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    terms(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _templateOwners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "acceptTerms(uint256,string,string)"(
      templateId: PromiseOrValue<BigNumberish>,
      newTemplateUrl: PromiseOrValue<string>,
      _metdataUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "acceptTerms(uint256,string)"(
      templateId: PromiseOrValue<BigNumberish>,
      newTemplateUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "acceptTermsFor(address,string,string,uint256,bytes)"(
      _signer: PromiseOrValue<string>,
      _newtemplateUrl: PromiseOrValue<string>,
      _metadataUri: PromiseOrValue<string>,
      _templateId: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "acceptTermsFor(address,string,uint256,bytes)"(
      _signer: PromiseOrValue<string>,
      _newtemplateUrl: PromiseOrValue<string>,
      _templateId: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptedTerms(
      _signer: PromiseOrValue<string>,
      _templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveMetaSigner(
      _signer: PromiseOrValue<string>,
      _approval: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hashAddressId(
      user: PromiseOrValue<string>,
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashKeyId(
      key: PromiseOrValue<string>,
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMetaSigner(
      _signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastTermChange(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mintTemplate(string,address)"(
      _templateUri: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mintTemplate(string)"(
      _templateUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renderers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGlobalRenderer(
      _newGlobalRenderer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTemplate(
      _templateId: PromiseOrValue<BigNumberish>,
      _newTemplate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTerm(
      _templateId: PromiseOrValue<BigNumberish>,
      _key: PromiseOrValue<string>,
      _value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    templateUrl(
      templateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    templateUrlWithPrefix(
      templateId: PromiseOrValue<BigNumberish>,
      prefix: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    templates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    term(
      templateId: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    terms(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
