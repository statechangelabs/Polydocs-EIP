/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface RegistryInterface extends utils.Interface {
  functions: {
    "acceptTerms(uint256,string)": FunctionFragment;
    "acceptedTerms(address,uint256)": FunctionFragment;
    "lastTermChange(uint256)": FunctionFragment;
    "renderers(uint256)": FunctionFragment;
    "templates(uint256)": FunctionFragment;
    "terms(string,uint256)": FunctionFragment;
    "termsUrl(uint256)": FunctionFragment;
    "termsUrlWithPrefix(uint256,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptTerms"
      | "acceptedTerms"
      | "lastTermChange"
      | "renderers"
      | "templates"
      | "terms"
      | "termsUrl"
      | "termsUrlWithPrefix"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptTerms",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptedTerms",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTermChange",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renderers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "templates",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "terms",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "termsUrl",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "termsUrlWithPrefix",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptedTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTermChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renderers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "templates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "terms", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "termsUrl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "termsUrlWithPrefix",
    data: BytesLike
  ): Result;

  events: {
    "AcceptedTerms(address,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AcceptedTerms"): EventFragment;
}

export interface AcceptedTermsEventObject {
  user: string;
  templateId: BigNumber;
  uri: string;
}
export type AcceptedTermsEvent = TypedEvent<
  [string, BigNumber, string],
  AcceptedTermsEventObject
>;

export type AcceptedTermsEventFilter = TypedEventFilter<AcceptedTermsEvent>;

export interface Registry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptTerms(
      tokenId: PromiseOrValue<BigNumberish>,
      newtermsUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptedTerms(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastTermChange(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renderers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    templates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    terms(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    termsUrl(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    termsUrlWithPrefix(
      tokenId: PromiseOrValue<BigNumberish>,
      prefix: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  acceptTerms(
    tokenId: PromiseOrValue<BigNumberish>,
    newtermsUrl: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptedTerms(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastTermChange(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renderers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  templates(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  terms(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  termsUrl(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  termsUrlWithPrefix(
    tokenId: PromiseOrValue<BigNumberish>,
    prefix: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    acceptTerms(
      tokenId: PromiseOrValue<BigNumberish>,
      newtermsUrl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptedTerms(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastTermChange(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renderers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    templates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    terms(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    termsUrl(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    termsUrlWithPrefix(
      tokenId: PromiseOrValue<BigNumberish>,
      prefix: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AcceptedTerms(address,uint256,string)"(
      user?: PromiseOrValue<string> | null,
      templateId?: PromiseOrValue<BigNumberish> | null,
      uri?: null
    ): AcceptedTermsEventFilter;
    AcceptedTerms(
      user?: PromiseOrValue<string> | null,
      templateId?: PromiseOrValue<BigNumberish> | null,
      uri?: null
    ): AcceptedTermsEventFilter;
  };

  estimateGas: {
    acceptTerms(
      tokenId: PromiseOrValue<BigNumberish>,
      newtermsUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptedTerms(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastTermChange(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renderers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    templates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    terms(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    termsUrl(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    termsUrlWithPrefix(
      tokenId: PromiseOrValue<BigNumberish>,
      prefix: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptTerms(
      tokenId: PromiseOrValue<BigNumberish>,
      newtermsUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptedTerms(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastTermChange(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renderers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    templates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    terms(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    termsUrl(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    termsUrlWithPrefix(
      tokenId: PromiseOrValue<BigNumberish>,
      prefix: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
